import React, { useState, useEffect } from 'react';
import './App.css';

function App() {
  const [config, setConfig] = useState({
    api_key: '',
    secret_key: '',
    symbol: 'BTCUSDT',
    buy_quantity: 0.001,
    sell_quantity: 0.001,
    max_price_deviation: 0.05
  });
  
  const [botStatus, setBotStatus] = useState({
    running: false,
    message: ''
  });
  
  const [logs, setLogs] = useState([]);
  const [isLoading, setIsLoading] = useState(false);

  const backendUrl = process.env.REACT_APP_BACKEND_URL || 'http://localhost:8001';

  // Fetch bot status periodically
  useEffect(() => {
    const interval = setInterval(fetchBotStatus, 2000);
    return () => clearInterval(interval);
  }, []);

  const fetchBotStatus = async () => {
    try {
      const response = await fetch(`${backendUrl}/api/bot-status`);
      const status = await response.json();
      setBotStatus(status);
    } catch (error) {
      console.error('Error fetching bot status:', error);
    }
  };

  const addLog = (message, type = 'info') => {
    const timestamp = new Date().toLocaleTimeString();
    setLogs(prev => [...prev.slice(-99), { timestamp, message, type }]);
  };

  const handleInputChange = (e) => {
    const { name, value, type } = e.target;
    setConfig(prev => ({
      ...prev,
      [name]: type === 'number' ? parseFloat(value) : value
    }));
  };

  const startBot = async () => {
    if (!config.api_key || !config.secret_key) {
      addLog('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á–∏', 'error');
      return;
    }

    setIsLoading(true);
    try {
      const response = await fetch(`${backendUrl}/api/start-bot`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(config)
      });

      const result = await response.json();
      
      if (response.ok) {
        addLog(`–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø–∞—Ä—ã ${config.symbol}`, 'success');
        await fetchBotStatus();
      } else {
        addLog(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ${result.detail}`, 'error');
      }
    } catch (error) {
      addLog(`–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${error.message}`, 'error');
    } finally {
      setIsLoading(false);
    }
  };

  const stopBot = async () => {
    setIsLoading(true);
    try {
      const response = await fetch(`${backendUrl}/api/stop-bot`, {
        method: 'POST'
      });

      const result = await response.json();
      
      if (response.ok) {
        addLog('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'success');
        await fetchBotStatus();
      } else {
        addLog(`–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: ${result.detail}`, 'error');
      }
    } catch (error) {
      addLog(`–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${error.message}`, 'error');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="App">
      <div className="container">
        <header className="header">
          <h1>ü§ñ MEXC Trading Bot</h1>
          <p>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –¥–ª—è –±–∏—Ä–∂–∏ MEXC</p>
        </header>

        {/* Configuration Section */}
        <div className="config-section">
          <h2>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</h2>
          
          <div className="config-grid">
            <div className="config-group">
              <label>API Key:</label>
              <input
                type="password"
                name="api_key"
                value={config.api_key}
                onChange={handleInputChange}
                placeholder="–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á MEXC"
                className="input-field"
              />
            </div>

            <div className="config-group">
              <label>Secret Key:</label>
              <input
                type="password"
                name="secret_key"
                value={config.secret_key}
                onChange={handleInputChange}
                placeholder="–í–≤–µ–¥–∏—Ç–µ Secret –∫–ª—é—á MEXC"
                className="input-field"
              />
            </div>

            <div className="config-group">
              <label>–í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞:</label>
              <input
                type="text"
                name="symbol"
                value={config.symbol}
                onChange={handleInputChange}
                placeholder="BTCUSDT"
                className="input-field"
              />
            </div>

            <div className="config-group">
              <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ –ø–æ–∫—É–ø–∫—É:</label>
              <input
                type="number"
                name="buy_quantity"
                value={config.buy_quantity}
                onChange={handleInputChange}
                step="0.001"
                min="0.001"
                className="input-field"
              />
            </div>

            <div className="config-group">
              <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É:</label>
              <input
                type="number"
                name="sell_quantity"
                value={config.sell_quantity}
                onChange={handleInputChange}
                step="0.001"
                min="0.001"
                className="input-field"
              />
            </div>

            <div className="config-group">
              <label>–ú–∞–∫—Å. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã (%):</label>
              <input
                type="number"
                name="max_price_deviation"
                value={config.max_price_deviation}
                onChange={handleInputChange}
                step="0.01"
                min="0.01"
                max="0.5"
                className="input-field"
              />
            </div>
          </div>

          <div className="button-group">
            <button 
              onClick={startBot} 
              disabled={isLoading || botStatus.running}
              className="btn btn-start"
            >
              {isLoading ? '‚è≥ –ó–∞–ø—É—Å–∫...' : '‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞'}
            </button>
            
            <button 
              onClick={stopBot} 
              disabled={isLoading || !botStatus.running}
              className="btn btn-stop"
            >
              {isLoading ? '‚è≥ –û—Å—Ç–∞–Ω–æ–≤–∫–∞...' : '‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞'}
            </button>
          </div>
        </div>

        {/* Status Section */}
        <div className="status-section">
          <h2>üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</h2>
          
          <div className="status-grid">
            <div className="status-item">
              <span className="status-label">–°–æ—Å—Ç–æ—è–Ω–∏–µ:</span>
              <span className={`status-value ${botStatus.running ? 'running' : 'stopped'}`}>
                {botStatus.running ? 'üü¢ –†–∞–±–æ—Ç–∞–µ—Ç' : 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
              </span>
            </div>

            {botStatus.symbol && (
              <div className="status-item">
                <span className="status-label">–ü–∞—Ä–∞:</span>
                <span className="status-value">{botStatus.symbol}</span>
              </div>
            )}

            {botStatus.best_bid && (
              <div className="status-item">
                <span className="status-label">–õ—É—á—à–∞—è –ø–æ–∫—É–ø–∫–∞:</span>
                <span className="status-value">{botStatus.best_bid}</span>
              </div>
            )}

            {botStatus.best_ask && (
              <div className="status-item">
                <span className="status-label">–õ—É—á—à–∞—è –ø—Ä–æ–¥–∞–∂–∞:</span>
                <span className="status-value">{botStatus.best_ask}</span>
              </div>
            )}

            {botStatus.spread && (
              <div className="status-item">
                <span className="status-label">–°–ø—Ä–µ–¥:</span>
                <span className="status-value">{botStatus.spread}</span>
              </div>
            )}

            {botStatus.initial_price && (
              <div className="status-item">
                <span className="status-label">–ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞:</span>
                <span className="status-value">{botStatus.initial_price}</span>
              </div>
            )}
          </div>

          {/* Active Orders */}
          {(botStatus.current_buy_order || botStatus.current_sell_order) && (
            <div className="orders-section">
              <h3>–ê–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞</h3>
              
              {botStatus.current_buy_order && (
                <div className="order-item buy-order">
                  <strong>üü¢ –ü–æ–∫—É–ø–∫–∞:</strong>
                  <span>–¶–µ–Ω–∞: {botStatus.current_buy_order.price}</span>
                  <span>ID: {botStatus.current_buy_order.orderId}</span>
                </div>
              )}

              {botStatus.current_sell_order && (
                <div className="order-item sell-order">
                  <strong>üî¥ –ü—Ä–æ–¥–∞–∂–∞:</strong>
                  <span>–¶–µ–Ω–∞: {botStatus.current_sell_order.price}</span>
                  <span>ID: {botStatus.current_sell_order.orderId}</span>
                </div>
              )}
            </div>
          )}
        </div>

        {/* Logs Section */}
        <div className="logs-section">
          <h2>üìù –ñ—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π</h2>
          <div className="logs-container">
            {logs.length === 0 ? (
              <p className="no-logs">–ñ—É—Ä–Ω–∞–ª –ø—É—Å—Ç</p>
            ) : (
              logs.map((log, index) => (
                <div key={index} className={`log-item ${log.type}`}>
                  <span className="log-time">{log.timestamp}</span>
                  <span className="log-message">{log.message}</span>
                </div>
              ))
            )}
          </div>
        </div>

        {/* Help Section */}
        <div className="help-section">
          <h2>‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</h2>
          <div className="help-content">
            <ol>
              <li>–ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á–∏ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ MEXC (—Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: —Ç–æ—Ä–≥–æ–≤–ª—è)</li>
              <li>–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏</li>
              <li>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ XXXUSDT</li>
              <li>–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã –æ—Ä–¥–µ—Ä–æ–≤ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã</li>
              <li>–ù–∞–∂–º–∏—Ç–µ "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞" –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã</li>
            </ol>
            
            <div className="warning">
              <strong>‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ:</strong> –¢–æ—Ä–≥–æ–≤–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏ —Å–≤—è–∑–∞–Ω–∞ —Å –≤—ã—Å–æ–∫–∏–º–∏ —Ä–∏—Å–∫–∞–º–∏. 
              –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞, –ø–æ—Ç–µ—Ä—é –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–µ—Ç–µ —Å–µ–±–µ –ø–æ–∑–≤–æ–ª–∏—Ç—å.
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default App;